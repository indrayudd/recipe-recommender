{"version":3,"sources":["MobileApp.js","useDebounce.js"],"names":["capitalizeSentence","str","length","trim","toUpperCase","slice","capitalizeWords","split","map","w","toLowerCase","join","MobileApp","title","setTitle","useState","autocompleteList","setAutocompleteList","highlightIndex","setHighlightIndex","skipNextAutocompleteRef","useRef","debouncedTitle","value","delay","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","useDebounce","suggestionsCache","metadata","setMetadata","coverRecs","setCoverRecs","error","setError","loadingMetadata","setLoadingMetadata","loadingCoverRecs","setLoadingCoverRecs","currentTab","setCurrentTab","isActive","setIsActive","isLoading","setIsLoading","ingredientsSelection","setIngredientsSelection","historyStack","setHistoryStack","icons","active","inactive","fetchAutocomplete","useCallback","async","res","fetch","concat","q","data","json","current","err","console","handleSuggestionClick","recipeName","found","find","x","prev","filtered","filter","_objectSpread","Promise","all","encodeURIComponent","then","r","_ref","metaData","coverData","type","catch","finally","handleNavClick","tab","initRemixIngredients","ings","initSel","forEach","ing","renderRemixPage","_metadata$ingredients","React","createElement","style","padding","marginBottom","className","recipe_name","src","cover_image","alt","ingredients","lowerIng","locked","includes","selected","key","onClick","ingredient","lower","[object Object]","toggleIngredient","remixBgColor","remixIcon","placeholder","onChange","e","target","onKeyDown","preventDefault","Math","min","max","item","i","onMouseEnter","color","renderContent","_metadata$steps","_metadata$ingredients2","idx","displayName","startsWith","rest","Array","fill","_","Fragment","steps","step","capStep","recommendations","rec","macros","calories","carbs","fat","protein","sat_fat","sugar","fontSize","margin","minutes","capitalizedIng","newIngredients","payload","original","method","headers","Content-Type","body","JSON","stringify","text","log","parse","message","backgroundColor","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.mobile.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./MobileApp.css\";\nimport useDebounce from \"./useDebounce\";\n\n/** Capitalize helpers */\nfunction capitalizeSentence(str) {\n  if (!str || !str.length) return str;\n  str = str.trim();\n  return str[0].toUpperCase() + str.slice(1);\n}\nfunction capitalizeWords(str) {\n  if (!str) return str;\n  return str\n    .split(\" \")\n    .map((w) => (w.length ? w[0].toUpperCase() + w.slice(1).toLowerCase() : w))\n    .join(\" \");\n}\n\nexport default function MobileApp() {\n  // ------------------ AUTOCOMPLETE ------------------\n  const [title, setTitle] = useState(\"\");\n  const [autocompleteList, setAutocompleteList] = useState([]);\n  const [highlightIndex, setHighlightIndex] = useState(-1);\n  const skipNextAutocompleteRef = useRef(false);\n  const debouncedTitle = useDebounce(title.trim(), 300);\n  const suggestionsCache = useRef({});\n\n  // ------------------ MAIN STATES ------------------\n  const [metadata, setMetadata] = useState(null);\n  const [coverRecs, setCoverRecs] = useState(null);\n  const [error, setError] = useState(\"\");\n\n  // Loading states\n  const [loadingMetadata, setLoadingMetadata] = useState(false);\n  const [loadingCoverRecs, setLoadingCoverRecs] = useState(false);\n\n  // TABS\n  const [currentTab, setCurrentTab] = useState(\"recipe\");\n\n  // AI Remix\n  const [isActive, setIsActive] = useState(false); // toggles color & sparkles\n  const [isLoading, setIsLoading] = useState(false); // for spinner while remixing\n\n  // We'll store which ingredients are selected for remix\n  const [ingredientsSelection, setIngredientsSelection] = useState({});\n\n  // HISTORY\n  // We'll store array of objects: { recipeName, metadata, coverRecs, type }\n  // \"type\" can be \"search\" or \"remix\"\n  const [historyStack, setHistoryStack] = useState([]);\n\n  // Nav icons\n  const icons = {\n    history: {\n      active: \"/assets/icons/history-active.svg\",\n      inactive: \"/assets/icons/history-inactive.svg\",\n    },\n    recipe: {\n      active: \"/assets/icons/recipe-active.svg\",\n      inactive: \"/assets/icons/recipe-inactive.svg\",\n    },\n    info: {\n      active: \"/assets/icons/info-active.svg\",\n      inactive: \"/assets/icons/info-inactive.svg\",\n    },\n  };\n\n  // =========================\n  // AUTOCOMPLETE LOGIC\n  // =========================\n  const fetchAutocomplete = useCallback(async (q) => {\n    try {\n      const res = await fetch(\n        `https://recipe-recommender-backend.onrender.com/autocomplete?title=${q}`\n      );\n      const data = await res.json();\n      if (q === title.trim()) {\n        suggestionsCache.current[q] = data || [];\n        setAutocompleteList(data || []);\n        setHighlightIndex(-1);\n      }\n    } catch (err) {\n      console.error(err);\n    }\n  }, [title]);\n\n  useEffect(() => {\n    if (skipNextAutocompleteRef.current) {\n      skipNextAutocompleteRef.current = false;\n      return;\n    }\n    if (!debouncedTitle || debouncedTitle.length < 3) {\n      setAutocompleteList([]);\n      setHighlightIndex(-1);\n      return;\n    }\n    if (suggestionsCache.current[debouncedTitle]) {\n      setAutocompleteList(suggestionsCache.current[debouncedTitle]);\n      setHighlightIndex(-1);\n    } else {\n      fetchAutocomplete(debouncedTitle);\n    }\n  }, [debouncedTitle, fetchAutocomplete]);\n\n  const handleInputChange = (e) => {\n    setTitle(e.target.value);\n    setHighlightIndex(-1);\n  };\n  const handleKeyDown = (e) => {\n    if (!autocompleteList || autocompleteList.length === 0) return;\n    switch (e.key) {\n      case \"ArrowDown\":\n        e.preventDefault();\n        setHighlightIndex((prev) => Math.min(prev + 1, autocompleteList.length - 1));\n        break;\n      case \"ArrowUp\":\n        e.preventDefault();\n        setHighlightIndex((prev) => Math.max(prev - 1, 0));\n        break;\n      case \"Enter\":\n        e.preventDefault();\n        if (highlightIndex >= 0) {\n          handleSuggestionClick(autocompleteList[highlightIndex]);\n        }\n        break;\n      default:\n        break;\n    }\n  };\n\n  // =========================\n  // SELECT RECIPE (like desktop)\n  // =========================\n  const handleSuggestionClick = (recipeName) => {\n    skipNextAutocompleteRef.current = true;\n    setTitle(\"\");\n    setAutocompleteList([]);\n    setHighlightIndex(-1);\n    setError(\"\");\n    setCurrentTab(\"recipe\");\n\n    // Check if in history\n    const found = historyStack.find((x) => x.recipeName === recipeName);\n    if (found) {\n      // Use cached\n      setMetadata(found.metadata);\n      setCoverRecs(found.coverRecs);\n      // Move to front\n      setHistoryStack((prev) => {\n        const filtered = prev.filter((x) => x.recipeName !== recipeName);\n        return [{ ...found }, ...filtered].slice(0, 10);\n      });\n    } else {\n      // fetch\n      setLoadingMetadata(true);\n      setLoadingCoverRecs(true);\n      setMetadata(null);\n      setCoverRecs(null);\n\n      Promise.all([\n        fetch(`https://recipe-recommender-backend.onrender.com/metadata?title=${encodeURIComponent(recipeName)}`)\n          .then(r => r.json()),\n        fetch(`https://recipe-recommender-backend.onrender.com/cover_recs?title=${encodeURIComponent(recipeName)}`)\n          .then(r => r.json()),\n      ])\n        .then(([metaData, coverData]) => {\n          if (metaData.error) {\n            setError(metaData.error);\n            return;\n          }\n          setMetadata(metaData);\n          setCoverRecs(coverData);\n          // store in history\n          setHistoryStack((prev) => {\n            const filtered = prev.filter((x) => x.recipeName !== recipeName);\n            const newEntry = {\n              recipeName,\n              metadata: metaData,\n              coverRecs: coverData,\n              type: \"search\",\n            };\n            return [newEntry, ...filtered].slice(0, 10);\n          });\n        })\n        .catch((err) => {\n          console.error(err);\n          setError(\"Failed to fetch recipe data\");\n        })\n        .finally(() => {\n          setLoadingMetadata(false);\n          setLoadingCoverRecs(false);\n        });\n    }\n  };\n\n  // =========================\n  // HISTORY + NAV\n  // =========================\n  useEffect(() => {\n    // If we leave 'remix' tab => reset the AI button\n    if (currentTab !== \"remix\") {\n      setIsActive(false);\n      setIsLoading(false);\n    }\n  }, [currentTab]);\n\n  const handleNavClick = (tab) => {\n    setCurrentTab(tab);\n  };\n\n  // =========================\n  // AI Remix: toggling\n  // =========================\n  const handleAiButtonClick = async () => {\n    if (!isActive) {\n      // We are not in remix => switch to remix\n      // and init the selected ingredients\n      if (metadata && metadata.ingredients) {\n        initRemixIngredients(metadata.ingredients);\n      }\n      setIsActive(true);\n      setCurrentTab(\"remix\");\n    } else {\n      // We are already in remix => user wants to \"Remix\" now\n      if (!metadata || !metadata.ingredients) {\n        // No recipe => do nothing\n        return;\n      }\n      // show spinner\n      setIsLoading(true);\n\n      // Gather new ingredients\n      const newIngredients = metadata.ingredients.filter((ing) => ingredientsSelection[ing]);\n      const payload = {\n        original: metadata,\n        newIngredients,\n      };\n      try {\n        const res = await fetch(\"https://recipe-recommender-backend.onrender.com/remix\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify(payload),\n        });\n        const text = await res.text();\n        console.log(\"Remix raw text:\", text);\n        let data;\n        try {\n          data = JSON.parse(text);\n        } catch (e) {\n          setError(\"Error parsing remix response: \" + e.message);\n          throw e;\n        }\n        if (data.error) {\n          setError(data.error);\n        } else {\n          // We have the new AI recipe\n          setMetadata(data);\n          // keep old coverRecs or fetch new? We'll keep old\n          // store in history\n          setHistoryStack((prev) => {\n            const filtered = prev.filter((x) => x.recipeName !== data.recipe_name);\n            // We'll display \"✨ \" in front\n            const newEntry = {\n              recipeName: \"✨ \" + data.recipe_name,\n              metadata: data,\n              coverRecs: coverRecs,\n              type: \"remix\",\n            };\n            return [newEntry, ...filtered].slice(0, 10);\n          });\n          // Switch to recipe tab\n          setCurrentTab(\"recipe\");\n        }\n      } catch (err) {\n        console.error(err);\n        setError(\"Failed to remix recipe\");\n      } finally {\n        setIsLoading(false);\n        setIsActive(false);\n      }\n    }\n  };\n\n  // Initialize all ingredients as selected\n  const initRemixIngredients = (ings) => {\n    const initSel = {};\n    ings.forEach((ing) => {\n      initSel[ing] = true;\n    });\n    setIngredientsSelection(initSel);\n  };\n\n  // Toggle chip\n  const toggleIngredient = (ingredient) => {\n    // block salt/sugar/oil/water\n    const lower = ingredient.toLowerCase();\n    if (\n      lower.includes(\"salt\") ||\n      lower.includes(\"sugar\") ||\n      lower.includes(\"oil\") ||\n      lower.includes(\"water\")\n    ) {\n      return;\n    }\n    setIngredientsSelection((prev) => ({\n      ...prev,\n      [ingredient]: !prev[ingredient],\n    }));\n  };\n\n  // =========================\n  // RECOMMENDATIONS\n  // =========================\n  const renderRecommendations = () => {\n    if (!coverRecs || !coverRecs.recommendations) return null;\n    return (\n      <>\n        <h3 className=\"recommendation-heading\">Recommendations</h3>\n        {loadingCoverRecs ? (\n          <div className=\"recommendation-grid\">\n            {Array(4).fill(0).map((_, i) => (\n              <div key={i} className=\"recommendation-card skeleton-recommendation\" />\n            ))}\n          </div>\n        ) : (\n          <div className=\"recommendation-grid\">\n            {coverRecs.recommendations.slice(0, 4).map((rec, i) => (\n              <div\n                key={i}\n                className=\"recommendation-card\"\n                onClick={() => handleSuggestionClick(rec.recipe_name)}\n              >\n                <p className=\"recommendation-name\">{rec.recipe_name}</p>\n              </div>\n            ))}\n          </div>\n        )}\n      </>\n    );\n  };\n\n  // =========================\n  // SKELETON LOADERS\n  // =========================\n  const renderRecipeSkeleton = () => {\n    return (\n      <div className=\"recipe-page\">\n        <div className=\"recipe-cover-card skeleton-card\" />\n        <div className=\"skeleton-steps\" />\n        <h3 className=\"recommendation-heading\">Recommendations</h3>\n        <div className=\"recommendation-grid\">\n          {Array(4).fill(0).map((_, i) => (\n            <div key={i} className=\"recommendation-card skeleton-recommendation\" />\n          ))}\n        </div>\n      </div>\n    );\n  };\n  const renderInfoSkeleton = () => {\n    return (\n      <div className=\"info-page\">\n        <div className=\"info-cover-card skeleton-card\" />\n        <div className=\"info-stats-row\">\n          <div className=\"macros-card skeleton-card\" />\n          <div className=\"prep-time-card skeleton-card\" />\n        </div>\n        <div className=\"ingredients-card skeleton-card\" />\n      </div>\n    );\n  };\n\n  // =========================\n  // RENDER REMIX PAGE\n  // =========================\n  const renderRemixPage = () => {\n    if (!metadata) {\n      return (\n        <div style={{ padding: 20 }}>\n          <h2>No recipe loaded to remix!</h2>\n        </div>\n      );\n    }\n    return (\n      <div style={{ padding: 16 }}>\n        <h2 style={{ marginBottom: 8 }}>AI Remix Page</h2>\n        {/* Show recipe name + cover */}\n        <div className=\"info-cover-card\" style={{ marginBottom: 16 }}>\n          <h2 className=\"info-title\">{metadata.recipe_name}</h2>\n          <img\n            className=\"info-cover\"\n            src={coverRecs?.cover_image || \"/fallback.png\"}\n            alt=\"Recipe Cover\"\n          />\n        </div>\n\n        <p>Deselect which ingredients you have:</p>\n        <div className=\"chip-container\">\n          {metadata.ingredients?.map((ing) => {\n            const lowerIng = ing.toLowerCase();\n            const locked =\n              lowerIng.includes(\"salt\") ||\n              lowerIng.includes(\"sugar\") ||\n              lowerIng.includes(\"oil\") ||\n              lowerIng.includes(\"water\");\n            const selected = ingredientsSelection[ing];\n            return (\n              <span\n                key={ing}\n                className={`chip ${selected ? \"selected\" : \"unselected\"} ${\n                  locked ? \"undeselectable\" : \"\"\n                }`}\n                onClick={() => {\n                  if (!locked) toggleIngredient(ing);\n                }}\n              >\n                {capitalizeWords(ing)}\n              </span>\n            );\n          })}\n        </div>\n\n        <p>\n          Tap the <strong>AI Remix Button</strong> again below to finalize your remix.\n        </p>\n      </div>\n    );\n  };\n\n  // =========================\n  // RENDER MAIN CONTENT\n  // =========================\n  const renderContent = () => {\n    switch (currentTab) {\n      case \"history\":\n        return (\n          <div style={{ padding: 20 }}>\n            <h2>History</h2>\n            {historyStack.length === 0 && <p>No history yet.</p>}\n\n            {/** \n             *  This is where we modify the displayed text \n             *  to ensure first-letter capitalized. \n             */}\n            {historyStack.map((item, idx) => {\n              let displayName = item.recipeName.trim();\n\n              // If this is a remix, we might have stored \"✨ \" already.\n              // So let's handle it carefully:\n              if (displayName.startsWith(\"✨ \")) {\n                // remove the \"✨ \" portion, then capitalize, then re-prepend \"✨ \"\n                const rest = displayName.slice(2).trim();\n                displayName = \"✨ \" + capitalizeSentence(rest);\n              } else {\n                // normal case => just capitalize\n                displayName = capitalizeSentence(displayName);\n              }\n\n              return (\n                <div\n                  key={idx}\n                  className=\"history-item\"\n                  onClick={() => {\n                    setCurrentTab(\"recipe\");\n                    // user picks from history => move item to front\n                    const filtered = historyStack.filter(x => x.recipeName !== item.recipeName);\n                    setHistoryStack([{ ...item }, ...filtered].slice(0, 10));\n                    setMetadata(item.metadata);\n                    setCoverRecs(item.coverRecs);\n                  }}\n                >\n                  <strong>{displayName}</strong>\n                </div>\n              );\n            })}\n          </div>\n        );\n\n      case \"recipe\":\n        if (loadingMetadata) {\n          return renderRecipeSkeleton();\n        }\n        return (\n          <div className=\"recipe-page\">\n            {metadata ? (\n              <>\n                <div className=\"recipe-cover-card\">\n                  <h2 className=\"recipe-title\">{metadata.recipe_name}</h2>\n                  <img\n                    className=\"recipe-cover\"\n                    src={\n                      coverRecs?.cover_image\n                        ? coverRecs.cover_image\n                        : \"/fallback.png\"\n                    }\n                    alt=\"Recipe Cover\"\n                  />\n                </div>\n\n                {metadata.steps?.length ? (\n                  <ol className=\"recipe-steps\">\n                    {metadata.steps.map((step, i) => {\n                      const capStep = capitalizeSentence(step);\n                      return <li key={i}>{capStep}</li>;\n                    })}\n                  </ol>\n                ) : (\n                  <p>No steps found</p>\n                )}\n\n                {renderRecommendations()}\n              </>\n            ) : (\n              <p style={{ padding: 16 }}>No recipe selected yet</p>\n            )}\n          </div>\n        );\n\n      case \"info\":\n        if (loadingMetadata) {\n          return renderInfoSkeleton();\n        }\n        return (\n          <div className=\"info-page\">\n            {metadata ? (\n              <>\n                <div className=\"info-cover-card\">\n                  <h2 className=\"info-title\">{metadata.recipe_name}</h2>\n                  <img\n                    className=\"info-cover\"\n                    src={\n                      coverRecs?.cover_image\n                        ? coverRecs.cover_image\n                        : \"/fallback.png\"\n                    }\n                    alt=\"Recipe Cover\"\n                  />\n                </div>\n\n                <div className=\"info-stats-row\">\n                  <div className=\"macros-card\">\n                    <h4>Macros</h4>\n                    {metadata.macros ? (\n                      <div className=\"macros-list\">\n                        <p><strong>Calories:</strong> {metadata.macros.calories}</p>\n                        <p><strong>Carbs:</strong> {metadata.macros.carbs}</p>\n                        <p><strong>Fat:</strong> {metadata.macros.fat}</p>\n                        <p><strong>Protein:</strong> {metadata.macros.protein}</p>\n                        <p><strong>Sat Fat:</strong> {metadata.macros.sat_fat}</p>\n                        <p><strong>Sugar:</strong> {metadata.macros.sugar}</p>\n                      </div>\n                    ) : (\n                      <p>No macro info</p>\n                    )}\n                  </div>\n\n                  <div className=\"prep-time-card\">\n                    <h4>Prep Time</h4>\n                    <p style={{ fontSize: \"18px\", margin: \"8px 0\" }}>\n                      {metadata.minutes} mins\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"ingredients-card\">\n                  <h4>Ingredients</h4>\n                  {metadata.ingredients?.length ? (\n                    <ul>\n                      {metadata.ingredients.map((ing, idx) => {\n                        const capitalizedIng = capitalizeWords(ing);\n                        return <li key={idx}>{capitalizedIng}</li>;\n                      })}\n                    </ul>\n                  ) : (\n                    <p>No ingredients found</p>\n                  )}\n                </div>\n              </>\n            ) : (\n              <p style={{ padding: 16 }}>No recipe selected yet</p>\n            )}\n          </div>\n        );\n\n      case \"remix\":\n        // show the \"deselect missing ingredients\" UI\n        return renderRemixPage();\n\n      default:\n        return <div style={{ padding: 20 }}><h2>Default Page</h2></div>;\n    }\n  };\n\n  // The big AI button color & icon\n  const remixBgColor = isActive ? \"#4A9390\" : \"#EBF7F7\";\n  let remixIcon = isActive\n    ? \"/assets/icons/sparkles-white.svg\"\n    : \"/assets/icons/sparkles-teal.svg\";\n  if (isLoading) {\n    remixIcon = null;\n  }\n\n  return (\n    <div className=\"mobile-container\">\n      {/* Header + search */}\n      <header className=\"mobile-top-header\">\n        <h2 className=\"mobile-title\">AI Recipes</h2>\n        <div className=\"mobile-search-bar\">\n          <input\n            type=\"text\"\n            className=\"search-input\"\n            placeholder=\"Search recipes...\"\n            value={title}\n            onChange={handleInputChange}\n            onKeyDown={handleKeyDown}\n          />\n          <button className=\"search-button\">\n            <img src=\"magnifying-glass.png\" alt=\"Search\" />\n          </button>\n          {/* Autocomplete dropdown */}\n          {autocompleteList.length > 0 && (\n            <ul className=\"autocomplete-dropdown\">\n              {autocompleteList.map((item, i) => (\n                <li\n                  key={i}\n                  className={i === highlightIndex ? \"highlighted\" : \"\"}\n                  onMouseEnter={() => setHighlightIndex(i)}\n                  onClick={() => handleSuggestionClick(item)}\n                >\n                  {item}\n                </li>\n              ))}\n            </ul>\n          )}\n        </div>\n      </header>\n\n      {/* Main content */}\n      <div className=\"mobile-content\">\n        {error && <p style={{ color: \"red\", padding: 10 }}>{error}</p>}\n        {renderContent()}\n      </div>\n\n      {/* Bottom Nav */}\n      <nav className=\"mobile-bottom-nav\">\n        <div className=\"nav-left\">\n          <div className=\"nav-item\" onClick={() => handleNavClick(\"history\")}>\n            <img\n              src={\n                currentTab === \"history\"\n                  ? icons.history.active\n                  : icons.history.inactive\n              }\n              alt=\"History\"\n            />\n            <span>History</span>\n          </div>\n          <div className=\"nav-item\" onClick={() => handleNavClick(\"recipe\")}>\n            <img\n              src={\n                currentTab === \"recipe\"\n                  ? icons.recipe.active\n                  : icons.recipe.inactive\n              }\n              alt=\"Recipe\"\n            />\n            <span>Recipe</span>\n          </div>\n          <div className=\"nav-item\" onClick={() => handleNavClick(\"info\")}>\n            <img\n              src={\n                currentTab === \"info\"\n                  ? icons.info.active\n                  : icons.info.inactive\n              }\n              alt=\"Info\"\n            />\n            <span>Info</span>\n          </div>\n        </div>\n\n        <div className=\"ai-button-wrapper\">\n          <button\n            className=\"ai-remix-button\"\n            onClick={handleAiButtonClick}\n            style={{ backgroundColor: remixBgColor }}\n          >\n            {isLoading ? (\n              <img src=\"/assets/icons/loading-spinner.svg\" alt=\"Loading\" />\n            ) : remixIcon ? (\n              <img src={remixIcon} alt=\"Remix\" />\n            ) : null}\n          </button>\n        </div>\n      </nav>\n    </div>\n  );\n}\n\n// Immediately render\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(<MobileApp />);\n","import { useState, useEffect } from \"react\";\n\n/**\n * useDebounce\n * Delays updating the returned value until `delay` milliseconds have elapsed\n * after the last time `value` changed.\n */\nexport default function useDebounce(value, delay) {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n}\n"],"sourceRoot":""}