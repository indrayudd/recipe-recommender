{"version":3,"sources":["App.js","useDebounce.js"],"names":["App","title","setTitle","useState","autocompleteList","setAutocompleteList","metadata","setMetadata","coverRecs","setCoverRecs","error","setError","loadingMetadata","setLoadingMetadata","loadingCoverRecs","setLoadingCoverRecs","highlightIndex","setHighlightIndex","showRemixModal","setShowRemixModal","ingredientsSelection","setIngredientsSelection","isRemixing","setIsRemixing","originalMetadata","setOriginalMetadata","remixStack","setRemixStack","history","setHistory","showHistoryPanel","setShowHistoryPanel","debouncedTitle","value","delay","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","useDebounce","trim","suggestionsCache","useRef","skipNextAutocompleteRef","showRightSide","fetchAutocomplete","useCallback","async","res","fetch","concat","q","data","json","current","err","console","length","handleSuggestionClick","suggestion","Promise","all","then","_ref","metadataData","coverRecsData","prev","type","recipe_name","slice","catch","finally","React","createElement","className","onClick","role","aria-label","style","position","onSubmit","e","preventDefault","placeholder","onChange","target","onKeyDown","key","Math","min","max","src","alt","map","item","i","onMouseEnter","Fragment","marginTop","height","fontWeight","textTransform","fontSize","fontFamily","background","borderRadius","padding","color","boxSizing","macros","margin","calories","display","gridTemplateColumns","rowGap","columnGap","fat","protein","sugar","sat_fat","sodium","carbs","flexDirection","ingredients","flex","overflowY","paddingLeft","ing","idx","marginBottom","openRemixModal","initialSelection","forEach","entry","index","handleHistoryItemClick","paddingTop","overflowX","width","cover_image","objectFit","minutes","gap","steps","step","text","toUpperCase","capitalizeFirstLetter","Array","fill","_","recommendations","rec","textAlign","justifyContent","alignItems","lowerIng","toLowerCase","undeselectable","includes","ingredient","_objectSpread","[object Object]","toggleIngredient","handleRemix","newIngredients","filter","payload","original","method","headers","Content-Type","body","JSON","stringify","log","parse","message","disabled","ReactDOM","createRoot","document","getElementById","render"],"mappings":"oJAKA,SAASA,IAEP,MAAOC,EAAOC,GAAYC,mBAAS,KAC5BC,EAAkBC,GAAuBF,mBAAS,KAClDG,EAAUC,GAAeJ,mBAAS,OAClCK,EAAWC,GAAgBN,mBAAS,OACpCO,EAAOC,GAAYR,mBAAS,KAC5BS,EAAiBC,GAAsBV,oBAAS,IAChDW,EAAkBC,GAAuBZ,oBAAS,IAClDa,EAAgBC,GAAqBd,oBAAU,IAC/Ce,EAAgBC,GAAqBhB,oBAAS,IAC9CiB,EAAsBC,GAA2BlB,mBAAS,KAC1DmB,EAAYC,GAAiBpB,oBAAS,IACtCqB,EAAkBC,GAAuBtB,mBAAS,OAClDuB,EAAYC,GAAiBxB,mBAAS,KACtCyB,EAASC,GAAc1B,mBAAS,KAChC2B,EAAkBC,GAAuB5B,oBAAS,GAEnD6B,EChBO,SAAqBC,EAAOC,GACzC,MAAOC,EAAgBC,GAAqBjC,mBAAS8B,GAYrD,OAVAI,oBAAU,KACR,MAAMC,EAAUC,WAAW,KACzBH,EAAkBH,IACjBC,GAEH,MAAO,KACLM,aAAaF,KAEd,CAACL,EAAOC,IAEJC,EDGgBM,CAAYxC,EAAMyC,OAAQ,KAC3CC,EAAmBC,iBAAO,IAC1BC,EAA0BD,kBAAO,GACjCE,EAAgBlC,GAAmBE,GAAoBR,GAAYE,EAGnEuC,EAAoBC,sBAAYC,UACpC,IACE,MAAMC,QAAYC,MAAK,sEAAAC,OAAuEC,IACxFC,QAAaJ,EAAIK,OACnBF,IAAMpD,EAAMyC,SACdC,EAAiBa,QAAQH,GAAKC,GAAQ,GACtCjD,EAAoBiD,GAAQ,IAC5BrC,GAAmB,IAErB,MAAOwC,GACPC,QAAQhD,MAAM+C,KAEf,CAACxD,IAEJoC,oBAAU,KACR,IAAIQ,EAAwBW,QAI5B,OAAKxB,GAAkBA,EAAe2B,OAAS,GAC7CtD,EAAoB,SACpBY,GAAmB,SAGjB0B,EAAiBa,QAAQxB,IAC3B3B,EAAoBsC,EAAiBa,QAAQxB,IAC7Cf,GAAmB,IAEnB8B,EAAkBf,IAZlBa,EAAwBW,SAAU,GAcnC,CAACxB,EAAgBe,IAGpB,MA8BMa,EAAyBC,IAC7BhB,EAAwBW,SAAU,EAClC7C,EAAS,IACTT,EAAS,IACTG,EAAoB,IACpBY,GAAmB,GACnBV,EAAY,MACZE,EAAa,MACbI,GAAmB,GACnBE,GAAoB,GAGpB+C,QAAQC,IAAI,CACVZ,MAAK,kEAAAC,OAAmES,IAAcG,KAAMd,GAC1FA,EAAIK,QAENJ,MAAK,oEAAAC,OAAqES,IAAcG,KAAMd,GAC5FA,EAAIK,UAGLS,KAAKC,IAAmC,IAAjCC,EAAcC,GAAcF,EAC9BC,EAAaxD,MACfC,EAASuD,EAAaxD,QAEtBH,EAAY2D,GACZzC,EAAoByC,GACpBzD,EAAa0D,GACbtC,EAAYuC,IAOV,MAAO,CANU,CACfC,KAAM,SACNC,YAAaJ,EAAaI,YAC1BhE,SAAU4D,EACV1D,UAAW2D,MAEQC,GAAMG,MAAM,EAAG,SAIzCC,MAAOf,IACNC,QAAQhD,MAAM+C,GACd9C,EAAS,iCAEV8D,QAAQ,KACP5D,GAAmB,GACnBE,GAAoB,MA0G1B,OACE2D,IAAAC,cAAA,OAAKC,UAAU,iBAEbF,IAAAC,cAAA,OAAKC,UAAU,oBACbF,IAAAC,cAAA,OAAKC,UAAU,oBAEbF,IAAAC,cAAA,OACEC,UAAU,sBACVC,QAASA,IAAM9C,GAAoB,IAEnC2C,IAAAC,cAAA,QAAMC,UAAU,eAAeE,KAAK,MAAMC,aAAW,gBAAe,WAItEL,IAAAC,cAAA,MAAIC,UAAU,eAAc,eAI9BF,IAAAC,cAAA,OAAKC,UAAS,gBAAAxB,OAAkBtB,EAAmB,WAAa,YAC9D4C,IAAAC,cAAA,QAAMC,UAAU,aAAaI,MAAO,CAAEC,SAAU,YAAcC,SAAWC,GAAMA,EAAEC,kBAC/EV,IAAAC,cAAA,SACEN,KAAK,OACLgB,YAAY,sBACZpD,MAAOhC,EACPqF,SA5MeH,IACzBjF,EAASiF,EAAEI,OAAOtD,OAClBhB,GAAmB,IA2MTuE,UAxMWL,IACrB,GAAK/E,GAAgD,IAA5BA,EAAiBuD,OAC1C,OAAQwB,EAAEM,KACR,IAAK,YACHN,EAAEC,iBACFnE,EAAmBmD,GAASsB,KAAKC,IAAIvB,EAAO,EAAGhE,EAAiBuD,OAAS,IACzE,MACF,IAAK,UACHwB,EAAEC,iBACFnE,EAAmBmD,GAASsB,KAAKE,IAAIxB,EAAO,EAAG,IAC/C,MACF,IAAK,QACHe,EAAEC,iBACEpE,EAAiB,EACnBC,EAAkB,GAElB2C,EAAsBxD,EAAiBY,MAyLnC4D,UAAU,gBAEZF,IAAAC,cAAA,UAAQC,UAAU,eAAeC,QAAUM,GAAMA,EAAEC,kBACjDV,IAAAC,cAAA,OAAKkB,IAAI,wBAAwBC,IAAI,SAASlB,UAAU,iBAEzDxE,EAAiBuD,OAAS,GACzBe,IAAAC,cAAA,MAAIC,UAAU,yBACXxE,EAAiB2F,IAAI,CAACC,EAAMC,IAC3BvB,IAAAC,cAAA,MACEc,IAAKQ,EACLrB,UAAWqB,IAAMjF,EAAiB,cAAgB,GAClDkF,aAAcA,IAAMjF,EAAkBgF,GACtCpB,QAASA,IAAMjB,EAAsBoC,IAEpCA,MAOV1F,GAAYM,EACX8D,IAAAC,cAAAD,IAAAyB,SAAA,KACEzB,IAAAC,cAAA,OAAKC,UAAU,gBAAgBI,MAAO,CAAEoB,UAAW,SAChDxF,IAAoBN,EACnBoE,IAAAC,cAAA,OAAKC,UAAU,yCAAyCI,MAAO,CAAEqB,OAAQ,UACvE/F,EACFoE,IAAAC,cAAA,KAAGK,MAAO,CAAEsB,WAAY,OAAQC,cAAe,aAAcC,SAAU,OAAQC,WAAY,iCACxFnG,EAASgE,aAEV,MAGNI,IAAAC,cAAA,OACEC,UAAU,aACVI,MAAO,CACLoB,UAAW,OACXM,WAAY,QACZC,aAAc,MACdC,QAAS,OACTC,MAAO,OACPR,OAAQ,QACRS,UAAW,eAGZlG,IAAoBN,EACnBoE,IAAAC,cAAA,OAAKC,UAAU,WAAWI,MAAO,CAAEqB,OAAQ,OAAQM,aAAc,SAC/DrG,GAAYA,EAASyG,SAAWzG,EAASyG,OAAOrG,MAClDgE,IAAAC,cAAAD,IAAAyB,SAAA,KACEzB,IAAAC,cAAA,MAAIK,MAAO,CAAEgC,OAAQ,aAAcP,WAAY,+BAAgCH,WAAY,SACxFhG,EAASyG,OAAOE,SAAS,SAE5BvC,IAAAC,cAAA,OACEC,UAAU,aACVI,MAAO,CACLkC,QAAS,OACTC,oBAAqB,iBACrBC,OAAQ,MACRC,UAAW,OACXZ,WAAY,+BACZD,SAAU,SAGZ9B,IAAAC,cAAA,SAAG,QAAMrE,EAASyG,OAAOO,KACzB5C,IAAAC,cAAA,SAAG,YAAUrE,EAASyG,OAAOQ,SAC7B7C,IAAAC,cAAA,SAAG,UAAQrE,EAASyG,OAAOS,OAC3B9C,IAAAC,cAAA,SAAG,YAAUrE,EAASyG,OAAOU,SAC7B/C,IAAAC,cAAA,SAAG,WAASrE,EAASyG,OAAOW,QAC5BhD,IAAAC,cAAA,SAAG,UAAQrE,EAASyG,OAAOY,SAK/BjD,IAAAC,cAAA,KAAGK,MAAO,CAAEgC,OAAQ,IAAK,kBAI7BtC,IAAAC,cAAA,OACEC,UAAU,mBACVI,MAAO,CACLoB,UAAW,OACXM,WAAY,QACZC,aAAc,MACdC,QAAS,OACTC,MAAO,OACPR,OAAQ,QACRS,UAAW,aACXI,QAAS,OACTU,cAAe,WAGhBhH,IAAoBN,EACnBoE,IAAAC,cAAA,OAAKC,UAAU,WAAWI,MAAO,CAAEqB,OAAQ,OAAQM,aAAc,SAC/DrG,GAAYA,EAASuH,YACvBnD,IAAAC,cAAAD,IAAAyB,SAAA,KACEzB,IAAAC,cAAA,MAAIK,MAAO,CAAEgC,OAAQ,YAAaP,WAAY,iCAAkC,eAChF/B,IAAAC,cAAA,OAAKK,MAAO,CAAE8C,KAAM,EAAGC,UAAW,OAAQtB,WAAY,iCACpD/B,IAAAC,cAAA,MAAIK,MAAO,CAAEgC,OAAQ,EAAGgB,YAAa,SAClC1H,EAASuH,YAAY9B,IAAI,CAACkC,EAAKC,IAC9BxD,IAAAC,cAAA,MAAIc,IAAKyC,EAAKlD,MAAO,CAAEmD,aAAc,QAAUF,OAMvDvD,IAAAC,cAAA,SAAG,yBAIPD,IAAAC,cAAA,UAAQC,UAAU,kBAAkBC,QAtOzBuD,KACrB,GAAI9H,GAAYA,EAASuH,YAAa,CACpC,MAAMQ,EAAmB,GACzB/H,EAASuH,YAAYS,QAASL,IAC5BI,EAAiBJ,IAAO,IAE1B5G,EAAwBgH,GAE1BlH,GAAkB,KA+NNuD,IAAAC,cAAA,OAAKkB,IAAI,4BAA4BC,IAAI,aAAalB,UAAU,eAChEF,IAAAC,cAAA,QAAMC,UAAU,iBAAgB,KAAEF,IAAAC,cAAA,WAAM,WAW1C,KACHjE,GAASgE,IAAAC,cAAA,KAAGC,UAAU,iBAAiBlE,IAI1CgE,IAAAC,cAAA,OAAKC,UAAS,iBAAAxB,OAAmBtB,EAAmB,WAAa,cAC/D4C,IAAAC,cAAA,OAAKC,UAAU,kBACbF,IAAAC,cAAA,QACEC,UAAU,gBACVC,QAASA,IAAM9C,GAAoB,GACnC+C,KAAK,MACLC,aAAW,iBACZ,UAGDL,IAAAC,cAAA,UAAI,YAEL/C,EAAQmE,IAAI,CAACwC,EAAOC,IACnB9D,IAAAC,cAAA,OAAKc,IAAK+C,EAAO5D,UAAU,eAAeC,QAASA,IApL7B0D,KAC9BhI,EAAYgI,EAAMjI,UAClBG,EAAa8H,EAAM/H,WACnBuB,GAAoB,IAiL6C0G,CAAuBF,IAC9D,UAAfA,EAAMlE,MACLK,IAAAC,cAAA,QAAMC,UAAU,cAAcE,KAAK,MAAMC,aAAW,YAAW,UAIhEwD,EAAMjE,gBAOfI,IAAAC,cAAA,OAAKC,UAAU,oBAAoBI,MAAO,CAAE0D,WAAY,OAAQC,UAAW,SAAU7B,UAAW,eAC5FhE,EAKA4B,IAAAC,cAAAD,IAAAyB,SAAA,KACEzB,IAAAC,cAAA,OACEC,UAAU,aACVI,MAAO,CACL4D,MAAO,OACPT,aAAc,OACdzB,WAAY,UACZE,QAAS,OACTD,aAAc,OACdG,UAAW,eAGZhG,IAAqBN,EACpBkE,IAAAC,cAAA,OAAKC,UAAU,uBAAuBI,MAAO,CAAE4D,MAAO,OAAQvC,OAAQ,QAAS8B,aAAc,UAC3F3H,EACFkE,IAAAC,cAAA,OACEkB,IAhNVrF,GAAaA,EAAUqI,YAClBrI,EAAUqI,YAEZ,gBA8MO/C,IAAI,QACJd,MAAO,CAAE4D,MAAO,OAAQvC,OAAQ,QAASyC,UAAW,QAASnC,aAAc,UAG7EjC,IAAAC,cAAA,OACEkB,IAAI,gBACJC,IAAI,QACJd,MAAO,CAAE4D,MAAO,OAAQvC,OAAQ,QAASyC,UAAW,QAASnC,aAAc,UAG9ErG,GACCoE,IAAAC,cAAA,OAAKK,MAAO,CAAEoB,UAAW,SACvB1B,IAAAC,cAAA,MAAIK,MAAO,CAAEgC,OAAQ,EAAGT,cAAe,aAAcE,WAAY,iCAC9DnG,EAASgE,aAEZI,IAAAC,cAAA,KAAGK,MAAO,CAAEgC,OAAQ,EAAGR,SAAU,SAAWlG,EAASyI,QAAQ,WAKnErE,IAAAC,cAAA,OAAKK,MAAO,CAAEkC,QAAS,OAAQ8B,IAAK,OAAQJ,MAAO,OAAQ9B,UAAW,eACpEpC,IAAAC,cAAA,OAAKK,MAAO,CAAE8C,KAAM,IAAKpB,WAAY,OAAQC,aAAc,OAAQC,QAAS,OAAQE,UAAW,aAAcI,QAAS,OAAQU,cAAe,WAC3IlD,IAAAC,cAAA,MAAIK,MAAO,CAAEyB,WAAY,iCAAkC,SAC3D/B,IAAAC,cAAA,OAAKK,MAAO,CAAE8C,KAAM,EAAGC,UAAW,OAAQtB,WAAY,iCACnD7F,IAAoBN,EACnBoE,IAAAC,cAAA,OAAKC,UAAU,WAAWI,MAAO,CAAEqB,OAAQ,QAASM,aAAc,UAChErG,GAAYA,EAAS2I,MACvBvE,IAAAC,cAAA,UACGrE,EAAS2I,MAAMlD,IAAI,CAACmD,EAAMjD,IACzBvB,IAAAC,cAAA,MAAIc,IAAKQ,EAAGjB,MAAO,CAAEmD,aAAc,QA5U1BgB,IACxBA,GAAwB,IAAhBA,EAAKxF,OACXwF,EAAK,GAAGC,cAAgBD,EAAK5E,MAAM,GADH,GA4UhB8E,CAAsBH,MAK7BxE,IAAAC,cAAA,SAAG,qBAKTD,IAAAC,cAAA,OAAKK,MAAO,CAAE8C,KAAM,IAAKZ,QAAS,OAAQU,cAAe,SAAUoB,IAAK,OAAQlC,UAAW,eACzFpC,IAAAC,cAAA,MAAIK,MAAO,CAAEgC,OAAQ,aAAcP,WAAY,iCAAkC,mBAChF3F,IAAqBN,EAClB8I,MAAM,GACHC,KAAK,GACLxD,IAAI,CAACyD,EAAGvD,IACPvB,IAAAC,cAAA,OAAKc,IAAKQ,EAAGrB,UAAU,+BAA+BI,MAAO,CAAEqB,OAAQ,WAE3E7F,GAAaA,EAAUiJ,gBACvBjJ,EAAUiJ,gBAAgBlF,MAAM,EAAG,GAAGwB,IAAI,CAAC2D,EAAKzD,IAC9CvB,IAAAC,cAAA,OAAKc,IAAKQ,EAAGrB,UAAU,sBAAsBI,MAAO,CAAEwB,SAAU,OAAQH,OAAQ,QAAUxB,QAASA,IAAMjB,EAAsB8F,EAAIpF,cAChIoF,EAAIpF,cAITI,IAAAC,cAAA,KAAGK,MAAO,CAAE2E,UAAW,WAAY,yBA5E7CjF,IAAAC,cAAA,OAAKC,UAAU,oBAAoBI,MAAO,CAAEkC,QAAS,OAAQ0C,eAAgB,SAAUC,WAAY,SAAUjB,MAAO,OAAQvC,OAAQ,SAClI3B,IAAAC,cAAA,KAAGK,MAAO,CAAEyB,WAAY,+BAAgCD,SAAU,SAAU,4BAoFjFtF,GACCwD,IAAAC,cAAA,OAAKC,UAAU,uBACbF,IAAAC,cAAA,OAAKC,UAAU,uBACbF,IAAAC,cAAA,UAAQC,UAAU,qBAAqBC,QAASA,IAAM1D,GAAkB,IAAQ,QAGhFuD,IAAAC,cAAA,UAAI,gCACJD,IAAAC,cAAA,OAAKC,UAAU,kBACZtE,GACCA,EAASuH,aACTvH,EAASuH,YAAY9B,IAAKkC,IACxB,MAAM6B,EAAW7B,EAAI8B,cACfC,EACJF,EAASG,SAAS,SAAWH,EAASG,SAAS,UAAYH,EAASG,SAAS,OAC/E,OACEvF,IAAAC,cAAA,QACEc,IAAKwC,EACLrD,UAAS,QAAAxB,OAAUhC,EAAqB6G,GAAO,WAAa,aAAY,KAAA7E,OACtE4G,EAAiB,iBAAmB,IAEtCnF,QAASA,KACFmF,GAlXDE,KAEtBA,EAAWH,cAAcE,SAAS,SAClCC,EAAWH,cAAcE,SAAS,UAClCC,EAAWH,cAAcE,SAAS,QAIpC5I,EAAyB+C,GAAI+F,wBAAA,GACxB/F,GAAI,IACPgG,CAACF,IAAc9F,EAAK8F,OAwWmBG,CAAiBpC,KAGvCA,MAKXvD,IAAAC,cAAA,UAAQC,UAAU,eAAeC,QA5WvByF,KAClB,IAAKhK,IAAaA,EAASuH,YAAa,OACxCtG,GAAc,GACd,MAAMgJ,EAAiBjK,EAASuH,YAAY2C,OACzCvC,GAAQ7G,EAAqB6G,IAE1BwC,EAAU,CACdC,SAAUpK,EACViK,eAAgBA,GAElBpH,MAAM,wDAAyD,CAC7DwH,OAAQ,OACRC,QAAS,CAAEC,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAUP,KAEpBzG,KAAMd,GAAQA,EAAIiG,QAClBnF,KAAMmF,IAEL,IAAI7F,EADJI,QAAQuH,IAAI,qBAAsB9B,GAElC,IACE7F,EAAOyH,KAAKG,MAAM/B,GAClB,MAAOhE,GAEP,MADAxE,EAAS,iCAAmCwE,EAAEgG,SACxChG,EAER,OAAO7B,IAERU,KAAMV,IACDA,EAAK5C,MACPC,EAAS2C,EAAK5C,QAEdH,EAAY+C,GACZ3B,EAAeyC,GAAS,IAAIA,EAAMd,IAClCzB,EAAYuC,GAOH,CANU,CACfC,KAAM,QACNC,YAAahB,EAAKgB,YAClBhE,SAAUgD,EACV9C,UAAWA,MAEQ4D,GAAMG,MAAM,EAAG,QAIzCC,MAAOf,IACNC,QAAQhD,MAAM+C,GACd9C,EAAS,4BAEV8D,QAAQ,KACPtD,GAAkB,GAClBI,GAAc,MA0T6C6J,SAAU9J,GAC9DA,EAAaoD,IAAAC,cAAA,QAAMC,UAAU,YAAoB,YASjD5E,YAGFqL,IAASC,WAAWC,SAASC,eAAe,SACpDC,OAAO/G,IAAAC,cAAC3E,EAAG","file":"static/js/main.desktop.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport useDebounce from \"./useDebounce\";\nimport \"./App.css\";\nimport ReactDOM from \"react-dom/client\";\n\nfunction App() {\n  // ------------------ State Variables ------------------\n  const [title, setTitle] = useState(\"\");\n  const [autocompleteList, setAutocompleteList] = useState([]);\n  const [metadata, setMetadata] = useState(null);\n  const [coverRecs, setCoverRecs] = useState(null);\n  const [error, setError] = useState(\"\");\n  const [loadingMetadata, setLoadingMetadata] = useState(false);\n  const [loadingCoverRecs, setLoadingCoverRecs] = useState(false);\n  const [highlightIndex, setHighlightIndex] = useState(-1);\n  const [showRemixModal, setShowRemixModal] = useState(false);\n  const [ingredientsSelection, setIngredientsSelection] = useState({});\n  const [isRemixing, setIsRemixing] = useState(false);\n  const [originalMetadata, setOriginalMetadata] = useState(null);\n  const [remixStack, setRemixStack] = useState([]);\n  const [history, setHistory] = useState([]);\n  const [showHistoryPanel, setShowHistoryPanel] = useState(false);\n\n  const debouncedTitle = useDebounce(title.trim(), 300);\n  const suggestionsCache = useRef({});\n  const skipNextAutocompleteRef = useRef(false);\n  const showRightSide = loadingMetadata || loadingCoverRecs || metadata || coverRecs;\n\n  // ------------------ Autocomplete ------------------\n  const fetchAutocomplete = useCallback(async (q) => {\n    try {\n      const res = await fetch(`https://recipe-recommender-backend.onrender.com/autocomplete?title=${q}`);\n      const data = await res.json();\n      if (q === title.trim()) {\n        suggestionsCache.current[q] = data || [];\n        setAutocompleteList(data || []);\n        setHighlightIndex(-1);\n      }\n    } catch (err) {\n      console.error(err);\n    }\n  }, [title]);\n\n  useEffect(() => {\n    if (skipNextAutocompleteRef.current) {\n      skipNextAutocompleteRef.current = false;\n      return;\n    }\n    if (!debouncedTitle || debouncedTitle.length < 3) {\n      setAutocompleteList([]);\n      setHighlightIndex(-1);\n      return;\n    }\n    if (suggestionsCache.current[debouncedTitle]) {\n      setAutocompleteList(suggestionsCache.current[debouncedTitle]);\n      setHighlightIndex(-1);\n    } else {\n      fetchAutocomplete(debouncedTitle);\n    }\n  }, [debouncedTitle, fetchAutocomplete]);\n\n  // ------------------ Input & Keyboard ------------------\n  const handleInputChange = (e) => {\n    setTitle(e.target.value);\n    setHighlightIndex(-1);\n  };\n\n  const handleKeyDown = (e) => {\n    if (!autocompleteList || autocompleteList.length === 0) return;\n    switch (e.key) {\n      case \"ArrowDown\":\n        e.preventDefault();\n        setHighlightIndex((prev) => Math.min(prev + 1, autocompleteList.length - 1));\n        break;\n      case \"ArrowUp\":\n        e.preventDefault();\n        setHighlightIndex((prev) => Math.max(prev - 1, 0));\n        break;\n      case \"Enter\":\n        e.preventDefault();\n        if (highlightIndex < 0) {\n          setHighlightIndex(0);\n        } else {\n          handleSuggestionClick(autocompleteList[highlightIndex]);\n        }\n        break;\n      default:\n        break;\n    }\n  };\n\n  // ------------------ Suggestion Click (Search) ------------------\n  const handleSuggestionClick = (suggestion) => {\n    skipNextAutocompleteRef.current = true;\n    setError(\"\");\n    setTitle(\"\");\n    setAutocompleteList([]);\n    setHighlightIndex(-1);\n    setMetadata(null);\n    setCoverRecs(null);\n    setLoadingMetadata(true);\n    setLoadingCoverRecs(true);\n\n    // Use Promise.all to fetch metadata and cover recs, then store them in history\n    Promise.all([\n      fetch(`https://recipe-recommender-backend.onrender.com/metadata?title=${suggestion}`).then((res) =>\n        res.json()\n      ),\n      fetch(`https://recipe-recommender-backend.onrender.com/cover_recs?title=${suggestion}`).then((res) =>\n        res.json()\n      ),\n    ])\n      .then(([metadataData, coverRecsData]) => {\n        if (metadataData.error) {\n          setError(metadataData.error);\n        } else {\n          setMetadata(metadataData);\n          setOriginalMetadata(metadataData);\n          setCoverRecs(coverRecsData);\n          setHistory((prev) => {\n            const newEntry = {\n              type: \"search\",\n              recipe_name: metadataData.recipe_name,\n              metadata: metadataData,\n              coverRecs: coverRecsData,\n            };\n            return [newEntry, ...prev].slice(0, 10);\n          });\n        }\n      })\n      .catch((err) => {\n        console.error(err);\n        setError(\"Failed to fetch search data\");\n      })\n      .finally(() => {\n        setLoadingMetadata(false);\n        setLoadingCoverRecs(false);\n      });\n  };\n\n  // ------------------ Helper Function ------------------\n  const capitalizeFirstLetter = (text) => {\n    if (!text || text.length === 0) return \"\";\n    return text[0].toUpperCase() + text.slice(1);\n  };\n\n  // ------------------ REMIX MODAL FUNCTIONS ------------------\n  const openRemixModal = () => {\n    if (metadata && metadata.ingredients) {\n      const initialSelection = {};\n      metadata.ingredients.forEach((ing) => {\n        initialSelection[ing] = true;\n      });\n      setIngredientsSelection(initialSelection);\n    }\n    setShowRemixModal(true);\n  };\n\n  // Prevent toggling if ingredient includes \"salt\", \"sugar\", or \"oil\"\n  const toggleIngredient = (ingredient) => {\n    if (\n      ingredient.toLowerCase().includes(\"salt\") ||\n      ingredient.toLowerCase().includes(\"sugar\") ||\n      ingredient.toLowerCase().includes(\"oil\")\n    ) {\n      return;\n    }\n    setIngredientsSelection((prev) => ({\n      ...prev,\n      [ingredient]: !prev[ingredient],\n    }));\n  };\n\n  const handleRemix = () => {\n    if (!metadata || !metadata.ingredients) return;\n    setIsRemixing(true);\n    const newIngredients = metadata.ingredients.filter(\n      (ing) => ingredientsSelection[ing]\n    );\n    const payload = {\n      original: metadata,\n      newIngredients: newIngredients,\n    };\n    fetch(\"https://recipe-recommender-backend.onrender.com/remix\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(payload),\n    })\n      .then((res) => res.text())\n      .then((text) => {\n        console.log(\"Raw response text:\", text);\n        let data;\n        try {\n          data = JSON.parse(text);\n        } catch (e) {\n          setError(\"Error parsing remix response: \" + e.message);\n          throw e;\n        }\n        return data;\n      })\n      .then((data) => {\n        if (data.error) {\n          setError(data.error);\n        } else {\n          setMetadata(data);\n          setRemixStack((prev) => [...prev, data]);\n          setHistory((prev) => {\n            const newEntry = {\n              type: \"remix\",\n              recipe_name: data.recipe_name,\n              metadata: data,\n              coverRecs: coverRecs, // Preserve current cover recs for remix items\n            };\n            return [newEntry, ...prev].slice(0, 10);\n          });\n        }\n      })\n      .catch((err) => {\n        console.error(err);\n        setError(\"Failed to remix recipe\");\n      })\n      .finally(() => {\n        setShowRemixModal(false);\n        setIsRemixing(false);\n      });\n  };\n\n  // Use cached metadata and coverRecs for history items\n  const handleHistoryItemClick = (entry) => {\n    setMetadata(entry.metadata);\n    setCoverRecs(entry.coverRecs);\n    setShowHistoryPanel(false);\n  };\n\n  const getCoverImage = () => {\n    if (coverRecs && coverRecs.cover_image) {\n      return coverRecs.cover_image;\n    }\n    return \"/fallback.png\";\n  };\n\n  // ------------------ Render ------------------\n  return (\n    <div className=\"app-container\">\n      {/* LEFT PANEL */}\n      <div className=\"panel left-panel\">\n        <div className=\"header-container\">\n          {/* History Toggle Flap on the left (overlayed as a tab) */}\n          <div\n            className=\"history-toggle-flap\"\n            onClick={() => setShowHistoryPanel(true)}\n          >\n            <span className=\"toggle-arrow\" role=\"img\" aria-label=\"open history\">\n              →\n            </span>\n          </div>\n          <h2 className=\"panel-title\">AI Recipes</h2>\n        </div>\n\n        {/* Normal left-panel content (with margin-top to restore original position) */}\n        <div className={`left-content ${showHistoryPanel ? \"fade-out\" : \"fade-in\"}`}>\n          <form className=\"query-form\" style={{ position: \"relative\" }} onSubmit={(e) => e.preventDefault()}>\n            <input\n              type=\"text\"\n              placeholder=\"Enter a recipe name\"\n              value={title}\n              onChange={handleInputChange}\n              onKeyDown={handleKeyDown}\n              className=\"query-input\"\n            />\n            <button className=\"query-button\" onClick={(e) => e.preventDefault()}>\n              <img src=\"/magnifying-glass.png\" alt=\"Search\" className=\"search-icon\" />\n            </button>\n            {autocompleteList.length > 0 && (\n              <ul className=\"autocomplete-dropdown\">\n                {autocompleteList.map((item, i) => (\n                  <li\n                    key={i}\n                    className={i === highlightIndex ? \"highlighted\" : \"\"}\n                    onMouseEnter={() => setHighlightIndex(i)}\n                    onClick={() => handleSuggestionClick(item)}\n                  >\n                    {item}\n                  </li>\n                ))}\n              </ul>\n            )}\n          </form>\n\n          {metadata || loadingMetadata ? (\n            <>\n              <div className=\"closest-match\" style={{ marginTop: \"20px\" }}>\n                {loadingMetadata && !metadata ? (\n                  <div className=\"closest-match skeleton skeleton-recipe\" style={{ height: \"60px\" }} />\n                ) : metadata ? (\n                  <p style={{ fontWeight: \"bold\", textTransform: \"capitalize\", fontSize: \"20px\", fontFamily: \"'Funnel Display', sans-serif\" }}>\n                    {metadata.recipe_name}\n                  </p>\n                ) : null}\n              </div>\n\n              <div\n                className=\"macro-card\"\n                style={{\n                  marginTop: \"20px\",\n                  background: \"white\",\n                  borderRadius: \"5px\",\n                  padding: \"10px\",\n                  color: \"#333\",\n                  height: \"120px\",\n                  boxSizing: \"border-box\",\n                }}\n              >\n                {loadingMetadata && !metadata ? (\n                  <div className=\"skeleton\" style={{ height: \"80px\", borderRadius: \"5px\" }} />\n                ) : metadata && metadata.macros && !metadata.macros.error ? (\n                  <>\n                    <h4 style={{ margin: \"0 0 10px 0\", fontFamily: \"'Funnel Display', sans-serif\", fontWeight: \"bold\" }}>\n                      {metadata.macros.calories} kcal\n                    </h4>\n                    <div\n                      className=\"macro-grid\"\n                      style={{\n                        display: \"grid\",\n                        gridTemplateColumns: \"repeat(2, 1fr)\",\n                        rowGap: \"4px\",\n                        columnGap: \"12px\",\n                        fontFamily: \"'Funnel Display', sans-serif\",\n                        fontSize: \"14px\"\n                      }}\n                    >\n                      <p>Fat: {metadata.macros.fat}</p>\n                      <p>Protein: {metadata.macros.protein}</p>\n                      <p>Sugar: {metadata.macros.sugar}</p>\n                      <p>Sat Fat: {metadata.macros.sat_fat}</p>\n                      <p>Sodium: {metadata.macros.sodium}</p>\n                      <p>Carbs: {metadata.macros.carbs}</p>\n                    </div>\n\n                  </>\n                ) : (\n                  <p style={{ margin: 0 }}>No macro info</p>\n                )}\n              </div>\n\n              <div\n                className=\"ingredients-card\"\n                style={{\n                  marginTop: \"20px\",\n                  background: \"white\",\n                  borderRadius: \"5px\",\n                  padding: \"10px\",\n                  color: \"#333\",\n                  height: \"180px\",\n                  boxSizing: \"border-box\",\n                  display: \"flex\",\n                  flexDirection: \"column\",\n                }}\n              >\n                {loadingMetadata && !metadata ? (\n                  <div className=\"skeleton\" style={{ height: \"80px\", borderRadius: \"5px\" }} />\n                ) : metadata && metadata.ingredients ? (\n                  <>\n                    <h4 style={{ margin: \"0 0 5px 0\", fontFamily: \"'Funnel Display', sans-serif\" }}>Ingredients</h4>\n                    <div style={{ flex: 1, overflowY: \"auto\", fontFamily: \"'Funnel Display', sans-serif\" }}>\n                      <ul style={{ margin: 0, paddingLeft: \"20px\" }}>\n                        {metadata.ingredients.map((ing, idx) => (\n                          <li key={idx} style={{ marginBottom: \"3px\" }}>{ing}</li>\n                        ))}\n                      </ul>\n                    </div>\n                  </>\n                ) : (\n                  <p>No ingredients found</p>\n                )}\n              </div>\n\n              <button className=\"ai-remix-button\" onClick={openRemixModal}>\n                <img src=\"/sparkles-svgrepo-com.svg\" alt=\"Remix Icon\" className=\"remix-icon\" />\n                <span className=\"ai-remix-text\">AI<br />Remix</span>\n              </button>\n\n              {/* {originalMetadata &&\n                metadata &&\n                metadata.recipe_name !== originalMetadata.recipe_name && (\n                  <button className=\"original-recipe-button\" onClick={() => setMetadata(originalMetadata)}>\n                    Original Recipe\n                  </button>\n                )} */}\n            </>\n          ) : null}\n          {error && <p className=\"error-message\">{error}</p>}\n        </div>\n\n        {/* History Panel (covers the left panel) */}\n        <div className={`history-panel ${showHistoryPanel ? \"slide-in\" : \"slide-out\"}`}>\n          <div className=\"history-header\">\n            <span\n              className=\"close-history\"\n              onClick={() => setShowHistoryPanel(false)}\n              role=\"img\"\n              aria-label=\"close history\"\n            >\n              ←\n            </span>\n            <h3>History</h3>\n          </div>\n          {history.map((entry, index) => (\n            <div key={index} className=\"history-item\" onClick={() => handleHistoryItemClick(entry)}>\n              {entry.type === \"remix\" && (\n                <span className=\"remix-emoji\" role=\"img\" aria-label=\"sparkles\">\n                  ✨\n                </span>\n              )}\n              {entry.recipe_name}\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* RIGHT PANEL */}\n      <div className=\"panel right-panel\" style={{ paddingTop: \"20px\", overflowX: \"hidden\", boxSizing: \"border-box\" }}>\n        {!showRightSide ? (\n          <div className=\"landing-watermark\" style={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\", width: \"100%\", height: \"100%\" }}>\n            <p style={{ fontFamily: \"'Funnel Display', sans-serif\", fontSize: \"20px\" }}>Search to See Recipes!</p>\n          </div>\n        ) : (\n          <>\n            <div\n              className=\"cover-card\"\n              style={{\n                width: \"100%\",\n                marginBottom: \"20px\",\n                background: \"#f8f8f8\",\n                padding: \"20px\",\n                borderRadius: \"10px\",\n                boxSizing: \"border-box\",\n              }}\n            >\n              {loadingCoverRecs && !coverRecs ? (\n                <div className=\"cover-image skeleton\" style={{ width: \"100%\", height: \"200px\", marginBottom: \"10px\" }} />\n              ) : coverRecs ? (\n                <img\n                  src={getCoverImage()}\n                  alt=\"cover\"\n                  style={{ width: \"100%\", height: \"200px\", objectFit: \"cover\", borderRadius: \"10px\" }}\n                />\n              ) : (\n                <img\n                  src=\"/fallback.png\"\n                  alt=\"cover\"\n                  style={{ width: \"100%\", height: \"200px\", objectFit: \"cover\", borderRadius: \"10px\" }}\n                />\n              )}\n              {metadata && (\n                <div style={{ marginTop: \"10px\" }}>\n                  <h2 style={{ margin: 0, textTransform: \"capitalize\", fontFamily: \"'Funnel Display', sans-serif\" }}>\n                    {metadata.recipe_name}\n                  </h2>\n                  <p style={{ margin: 0, fontSize: \"14px\" }}>{metadata.minutes} mins</p>\n                </div>\n              )}\n            </div>\n\n            <div style={{ display: \"flex\", gap: \"20px\", width: \"100%\", boxSizing: \"border-box\" }}>\n              <div style={{ flex: \"2\", background: \"#fff\", borderRadius: \"10px\", padding: \"10px\", boxSizing: \"border-box\", display: \"flex\", flexDirection: \"column\" }}>\n                <h3 style={{ fontFamily: \"'Funnel Display', sans-serif\" }}>Steps</h3>\n                <div style={{ flex: 1, overflowY: \"auto\", fontFamily: \"'Funnel Display', sans-serif\" }}>\n                  {loadingMetadata && !metadata ? (\n                    <div className=\"skeleton\" style={{ height: \"100px\", borderRadius: \"10px\" }} />\n                  ) : metadata && metadata.steps ? (\n                    <ol>\n                      {metadata.steps.map((step, i) => (\n                        <li key={i} style={{ marginBottom: \"5px\" }}>\n                          {capitalizeFirstLetter(step)}\n                        </li>\n                      ))}\n                    </ol>\n                  ) : (\n                    <p>No steps loaded</p>\n                  )}\n                </div>\n              </div>\n\n              <div style={{ flex: \"1\", display: \"flex\", flexDirection: \"column\", gap: \"10px\", boxSizing: \"border-box\" }}>\n                <h4 style={{ margin: \"0 0 10px 0\", fontFamily: \"'Funnel Display', sans-serif\" }}>Recommendations</h4>\n                {loadingCoverRecs && !coverRecs\n                  ? Array(4)\n                      .fill(0)\n                      .map((_, i) => (\n                        <div key={i} className=\"recommendation-item skeleton\" style={{ height: \"50px\" }} />\n                      ))\n                  : coverRecs && coverRecs.recommendations\n                  ? coverRecs.recommendations.slice(0, 4).map((rec, i) => (\n                      <div key={i} className=\"recommendation-item\" style={{ fontSize: \"14px\", height: \"50px\" }} onClick={() => handleSuggestionClick(rec.recipe_name)}>\n                        {rec.recipe_name}\n                      </div>\n                    ))\n                  : (\n                    <p style={{ textAlign: \"center\" }}>No recommendations</p>\n                  )}\n              </div>\n            </div>\n          </>\n        )}\n      </div>\n\n      {/* REMIX MODAL */}\n      {showRemixModal && (\n        <div className=\"remix-modal-overlay\">\n          <div className=\"remix-modal-content\">\n            <button className=\"modal-close-button\" onClick={() => setShowRemixModal(false)}>\n              &times;\n            </button>\n            <h2>Deselect Missing Ingredients</h2>\n            <div className=\"chip-container\">\n              {metadata &&\n                metadata.ingredients &&\n                metadata.ingredients.map((ing) => {\n                  const lowerIng = ing.toLowerCase();\n                  const undeselectable =\n                    lowerIng.includes(\"salt\") || lowerIng.includes(\"sugar\") || lowerIng.includes(\"oil\");\n                  return (\n                    <span\n                      key={ing}\n                      className={`chip ${ingredientsSelection[ing] ? \"selected\" : \"unselected\"} ${\n                        undeselectable ? \"undeselectable\" : \"\"\n                      }`}\n                      onClick={() => {\n                        if (!undeselectable) toggleIngredient(ing);\n                      }}\n                    >\n                      {ing}\n                    </span>\n                  );\n                })}\n            </div>\n            <button className=\"remix-button\" onClick={handleRemix} disabled={isRemixing}>\n              {isRemixing ? <span className=\"spinner\"></span> : \"Remix\"}\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n\n// Immediately render it:\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(<App />);\n","import { useState, useEffect } from \"react\";\n\n/**\n * useDebounce\n * Delays updating the returned value until `delay` milliseconds have elapsed\n * after the last time `value` changed.\n */\nexport default function useDebounce(value, delay) {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n}\n"],"sourceRoot":""}